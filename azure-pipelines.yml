# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- group: "static_Web_App"

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
  inputs:
    terraformVersion: '1.11.1'

- task: AzureCLI@2
  inputs:
    azureSubscription: 'Mine_DevOps'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
            # Create resource group
            az group create --name $(terraformstoragerg) --location "East US"
            
            # Create storage account
            az storage account create --name $(terraformstorageaccount) --resource-group $(terraformstoragerg) --sku Standard_LRS --location "East US"
            
            # Create storage container (Fix: added --account-name)
            az storage container create --name $(terraformcontainer) --account-name $(terraformstorageaccount) --auth-mode login
    addSpnToEnvironment: true

- task: AzureCLI@2
  inputs:
    azureSubscription: 'Mine_DevOps'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      key=$(az storage account keys list --g $terraformstoragerg --name $terraformstorageaccount --query '[0].value' --output tsv)
      echo "##vso[task.setvariable variable=storagekey]$key"      

    
- task: TerraformTaskV4@4
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: 'Mine_DevOps'
    backendAzureRmResourceGroupName: '$(terraformstoragerg)'
    backendAzureRmStorageAccountName: '$(terraformstorageaccount)'
    backendAzureRmContainerName: '$(terraformcontainer)'
    backendAzureRmKey: 'terraform.tfstate'

- task: TerraformTaskV4@4
  inputs:
    provider: 'azurerm'
    command: 'plan'
    commandOptions: '-var-file=var.tfvars'
    environmentServiceNameAzureRM: 'Mine_DevOps'

- task: TerraformTaskV4@4
  inputs:
    provider: 'azurerm'
    command: 'apply'
    commandOptions: '-var-file=var.tfvars -auto-approve'
    environmentServiceNameAzureRM: 'Mine_DevOps'